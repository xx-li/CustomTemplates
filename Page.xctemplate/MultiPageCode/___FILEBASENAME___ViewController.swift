//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by MGDT Templates
//

import UIKit

final class ___VARIABLE_moduleName___ViewController: DTBaseViewController {

    // MARK: - properties -

    
    lazy var categoryView: DTCategoryView = DTCategoryView.init(frame: CGRect.init(x: 0, y: 0, width: 320, height: 60))
    lazy var pageView: LXMultiPageView = LXMultiPageView.init(frame: UIScreen.main.bounds)


    

    

    let engine = ___VARIABLE_moduleName___Engine.init()

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()

        
        self.view.addSubview(categoryView)
        self.view.addSubview(pageView)
        categoryView.mas_makeConstraints { (make: MASConstraintMaker!) in
            make.left.right()?.offset()(0)
            if #available(iOS 11.0, *) {
                make.top.equalTo()(self.view.mas_safeAreaLayoutGuideTop)
            } else {
                make.top.offset()(64)
            }
            make.height.mas_equalTo()(60)
        }
        pageView.mas_makeConstraints { (make: MASConstraintMaker!) in
            make.left.right()?.bottom()?.offset()(0)
            make.top.equalTo()(self.categoryView.mas_bottom)
        }

        
        pageView.parentViewController = self
                
        self.pageView.childViewControllers = [
            UIViewController.init(),
            UIViewController.init()
        ]
        
        categoryView.titles = ["item1", "item2"]
        categoryView.sliderSize = CGSize.init(width: 12, height: 4)
        categoryView.sliderView.image = UIImage.init(named: "record_title_silder")
        categoryView.layoutType = .leftAlign
        categoryView.leftMargin = 24
        categoryView.bottomMargin = 10
        categoryView.subMargin = 28
        categoryView.selectedTitleFont = UIFont.systemFont(ofSize: 18, weight: .medium)
        categoryView.selectedTitleColor = UIColor.black.withAlphaComponent(0.85)
        categoryView.titleFont = UIFont.systemFont(ofSize: 14, weight: .regular)
        categoryView.titleColor = UIColor.black.withAlphaComponent(0.4)
        categoryView.contentScrollView = self.pageView.scrollView
        categoryView.selectedIndex = 0


        requestData()

        NotificationCenter.default.addObserver(
            self,
            selector: #selector(datasDidChange),
            name: .___VARIABLE_moduleName___DidChangedNotification,
            object: nil
        )
    }

    
    // MARK: - request -

    @objc func requestData() {
        view.dt_hiddenAllEmpty()
        self.dt_request = engine.requestData() { [weak self] (isSuccess, msg) in
            guard let self = self else { return }
            if !isSuccess {
                self.view.dt_showNetworkError(
                    withTarget: self,
                    action: #selector(self.requestData)
                )
                QMUITips.show(withText: msg)
                return
            }
            
            //TODO: 更新UI
        }
    }

    
    // MARK: - Data sync -
    
    @objc func datasDidChange(_ notification: Notification) {
        let behavior = notification.getUserInfo(
            for: .___VARIABLE_moduleName___DidChangedNotificationBehaviorKey
        )
        self.syncDataToUI(for: behavior)
    }

    // MARK: - UI -
    
    func syncDataToUI(for behavior: ___VARIABLE_moduleName___Engine.ChangeBehavior) {
        //TODO: update page UI
    }


    
}

