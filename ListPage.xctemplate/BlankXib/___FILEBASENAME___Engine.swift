//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by MGDT Templates
//

import Foundation

extension Notification.Name {
    static let ___VARIABLE_moduleName___DidChangedNotification = Notification.Name(rawValue: 
        "com.tingdao.app.___VARIABLE_moduleName___DidChangedNotification")
}

extension Notification.UserInfoKey {
    static var ___VARIABLE_moduleName___DidChangedNotificationBehaviorKey: Notification.UserInfoKey<___VARIABLE_moduleName___Engine.ChangeBehavior> {
        return Notification.UserInfoKey(key: "com.tingdao.app.___VARIABLE_moduleName___DidChangedNotification.ChangeBehavior")
    }
}

final class ___VARIABLE_moduleName___Engine {

    // MARK: - 枚举定义 -
    
    enum ChangeBehavior {
        case reload
    }


    // MARK: - 数据处理 -
    
    //swift array 的元素变化也会触发didSet方法
    private(set) var data: ___VARIABLE_moduleName___Model? {
        didSet {
            NotificationCenter.default.post(
                name: .___VARIABLE_moduleName___DidChangedNotification,
                object: self,
                typedUserInfo: [.___VARIABLE_moduleName___DidChangedNotificationBehaviorKey: .reload]
            )
        }
    }

    
    // MARK: - 请求接口数据 -
    
    func requestData(complete: ((_ isSuccess: Bool, _ msg: String?)->(Void))?) -> DTBaseRequest {
        let request = ___VARIABLE_moduleName___Request.init()
        request.start { [weak self] (res, err) in
            guard let self = self else { return }
            guard res.errorDes == nil else {
                if let complete = complete {
                    complete(false, res.errorDes)
                }
                return
            }

            let decoder = JSONDecoder()
            var flag = false
            if let biz = request.biz as? Dictionary<String, Any>,
                let jsonList = biz["list"] ,
                let jsonData = try? JSONSerialization.data(withJSONObject: jsonList, options: []),
                let model = try? decoder.decode(___VARIABLE_moduleName___Model.self, from: jsonData) {
                self.data = model
                flag = true
            }
            
            if let complete = complete {
                complete(flag, flag ? "请求并解析成功" : "数据格式错误，解析失败！")
            }
        }
        
        return request
    }

    
    
}
